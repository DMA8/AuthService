// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/auth_storage.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	models "github.com/DMA8/authService/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthStorage is a mock of AuthStorage interface.
type MockAuthStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStorageMockRecorder
}

// MockAuthStorageMockRecorder is the mock recorder for MockAuthStorage.
type MockAuthStorageMockRecorder struct {
	mock *MockAuthStorage
}

// NewMockAuthStorage creates a new mock instance.
func NewMockAuthStorage(ctrl *gomock.Controller) *MockAuthStorage {
	mock := &MockAuthStorage{ctrl: ctrl}
	mock.recorder = &MockAuthStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStorage) EXPECT() *MockAuthStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthStorage) CreateUser(ctx context.Context, user *models.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthStorageMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthStorage)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockAuthStorage) DeleteUser(ctx context.Context, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAuthStorageMockRecorder) DeleteUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAuthStorage)(nil).DeleteUser), ctx, login)
}

// GetUser mocks base method.
func (m *MockAuthStorage) GetUser(ctx context.Context, login string) (*models.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login)
	ret0, _ := ret[0].(*models.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthStorageMockRecorder) GetUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthStorage)(nil).GetUser), ctx, login)
}

// UpdateUser mocks base method.
func (m *MockAuthStorage) UpdateUser(ctx context.Context, user *models.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAuthStorageMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAuthStorage)(nil).UpdateUser), ctx, user)
}
